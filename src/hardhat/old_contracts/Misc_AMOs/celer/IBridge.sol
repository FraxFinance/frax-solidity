// SPDX-License-Identifier: GPL-2.0-or-later
pragma solidity >=0.8.0;

interface IBridge {
    function addGovernor(address _account) external;
    function addLiquidity(address _token, uint256 _amount) external;
    function addNativeLiquidity(uint256 _amount) external;
    function addPauser(address account) external;
    function addseq() external view returns (uint64);
    function delayPeriod() external view returns (uint256);
    function delayThresholds(address) external view returns (uint256);
    function delayedTransfers(bytes32) external view returns (address receiver, address token, uint256 amount, uint256 timestamp);
    function epochLength() external view returns (uint256);
    function epochVolumeCaps(address) external view returns (uint256);
    function epochVolumes(address) external view returns (uint256);
    function executeDelayedTransfer(bytes32 id) external;
    function governors(address) external view returns (bool);
    function increaseNoticePeriod(uint256 period) external;
    function isGovernor(address _account) external view returns (bool);
    function isPauser(address account) external view returns (bool);
    function lastOpTimestamps(address) external view returns (uint256);
    function maxSend(address) external view returns (uint256);
    function minAdd(address) external view returns (uint256);
    function minSend(address) external view returns (uint256);
    function minimalMaxSlippage() external view returns (uint32);
    function nativeWrap() external view returns (address);
    function noticePeriod() external view returns (uint256);
    function notifyResetSigners() external;
    function owner() external view returns (address);
    function pause() external;
    function paused() external view returns (bool);
    function pausers(address) external view returns (bool);
    function relay(bytes memory _relayRequest, bytes[] memory _sigs, address[] memory _signers, uint256[] memory _powers) external;
    function removeGovernor(address _account) external;
    function removePauser(address account) external;
    function renounceGovernor() external;
    function renounceOwnership() external;
    function renouncePauser() external;
    function resetSigners(address[] memory _signers, uint256[] memory _powers) external;
    function resetTime() external view returns (uint256);
    function send(address _receiver, address _token, uint256 _amount, uint64 _dstChainId, uint64 _nonce, uint32 _maxSlippage) external;
    function sendNative(address _receiver, uint256 _amount, uint64 _dstChainId, uint64 _nonce, uint32 _maxSlippage) external;
    function setDelayPeriod(uint256 _period) external;
    function setDelayThresholds(address[] memory _tokens, uint256[] memory _thresholds) external;
    function setEpochLength(uint256 _length) external;
    function setEpochVolumeCaps(address[] memory _tokens, uint256[] memory _caps) external;
    function setMaxSend(address[] memory _tokens, uint256[] memory _amounts) external;
    function setMinAdd(address[] memory _tokens, uint256[] memory _amounts) external;
    function setMinSend(address[] memory _tokens, uint256[] memory _amounts) external;
    function setMinimalMaxSlippage(uint32 _minimalMaxSlippage) external;
    function setWrap(address _weth) external;
    function ssHash() external view returns (bytes32);
    function transferOwnership(address newOwner) external;
    function transfers(bytes32) external view returns (bool);
    function triggerTime() external view returns (uint256);
    function unpause() external;
    function updateSigners(uint256 _triggerTime, address[] memory _newSigners, uint256[] memory _newPowers, bytes[] memory _sigs, address[] memory _curSigners, uint256[] memory _curPowers) external;
    function verifySigs(bytes memory _msg, bytes[] memory _sigs, address[] memory _signers, uint256[] memory _powers) external view;
    function withdraw(bytes memory _wdmsg, bytes[] memory _sigs, address[] memory _signers, uint256[] memory _powers) external;
    function withdraws(bytes32) external view returns (bool);
}